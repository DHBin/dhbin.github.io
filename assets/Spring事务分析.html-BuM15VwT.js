import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as t}from"./app-CqnfWZLp.js";const l={};function e(p,i){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="spring事务分析" tabindex="-1"><a class="header-anchor" href="#spring事务分析"><span>Spring事务分析</span></a></h1><h2 id="propagation" tabindex="-1"><a class="header-anchor" href="#propagation"><span>Propagation</span></a></h2><ul><li>REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</li><li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。</li><li>MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。</li><li>REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。</li><li>NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</li><li>NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。</li></ul><p>Spring中默认Propagation是REQUIRED</p><h2 id="transactionsynchronizationmanager" tabindex="-1"><a class="header-anchor" href="#transactionsynchronizationmanager"><span>TransactionSynchronizationManager</span></a></h2><ul><li>getCurrentTransactionName: 获取当前事务名</li></ul><h2 id="事务失效情景" tabindex="-1"><a class="header-anchor" href="#事务失效情景"><span>事务失效情景</span></a></h2><h3 id="propagation配置失效" tabindex="-1"><a class="header-anchor" href="#propagation配置失效"><span>Propagation配置失效</span></a></h3><p>Spring的事务是基于Aop实现的，因为调用同一类下的方法会导致Aop失效，所以使用@Transactional配置同一个类下的不同方法，且嵌套调用，会导致配置失效。下面看个例子</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">	</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Transactional</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rollbackFor</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> propagation</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Propagation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">REQUIRED</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    	y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Transactional</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rollbackFor</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> propagation</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Propagation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">REQUIRES_NEW</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    	</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>期望是y方法被调用时会挂起当前事务，并新建事务。但是x中调用y情况就不一样了，因为Aop失效，y上配置的@Transactional就没有效果了，所以y并不会新建一个事务执行，而是走了x的事务。</p>`,11)]))}const k=s(l,[["render",e]]),d=JSON.parse('{"path":"/tech/java/spring/Spring%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90.html","title":"Spring事务分析","lang":"zh-CN","frontmatter":{"date":"2020-07-02T17:05:00.000Z","category":["Java"],"tag":["Spring"],"description":"Spring事务分析 Propagation REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。 MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。 REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。 NOT_SU...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring事务分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-07-02T17:05:00.000Z\\",\\"dateModified\\":\\"2023-03-22T17:33:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"],["meta",{"property":"og:url","content":"https://dhbin.cn/tech/java/spring/Spring%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"Spring事务分析"}],["meta",{"property":"og:description","content":"Spring事务分析 Propagation REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。 MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。 REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。 NOT_SU..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T17:33:14.000Z"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2020-07-02T17:05:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T17:33:14.000Z"}]]},"git":{"createdTime":1679407002000,"updatedTime":1679506394000,"contributors":[{"name":"dhb","username":"dhb","email":"xx158@qq.com","commits":2,"url":"https://github.com/dhb"}]},"readingTime":{"minutes":1.28,"words":385},"excerpt":"\\n<h2>Propagation</h2>\\n<ul>\\n<li>REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</li>\\n<li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。</li>\\n<li>MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。</li>\\n<li>REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。</li>\\n<li>NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>\\n<li>NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</li>\\n<li>NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。</li>\\n</ul>","autoDesc":true}');export{k as comp,d as data};
