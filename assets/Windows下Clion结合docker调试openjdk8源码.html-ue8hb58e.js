import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as a,o as e}from"./app-CqnfWZLp.js";const l={};function d(p,s){return e(),n("div",null,s[0]||(s[0]=[a(`<h1 id="简单几步-windows下clion结合docker调试openjdk8源码" tabindex="-1"><a class="header-anchor" href="#简单几步-windows下clion结合docker调试openjdk8源码"><span>简单几步！Windows下Clion结合docker调试openjdk8源码</span></a></h1><blockquote><p>废话不多说，开干！</p></blockquote><p>原理是通过Docker编译openjdk，然后结合clion通过gdbserver远程调试</p><h2 id="环境需求" tabindex="-1"><a class="header-anchor" href="#环境需求"><span>环境需求</span></a></h2><ul><li>Clion</li><li>Docker</li></ul><p>我测试的版本</p><p>Docker for windows : <code>Docker version 20.10.2, build 2291f61</code></p><p>Clion : <code>2020.3.1</code></p><h1 id="构建镜像" tabindex="-1"><a class="header-anchor" href="#构建镜像"><span>构建镜像</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clone</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://e.coding.net/javalistcn/openjdk/build-openjdk-8.git</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  build-openjdk-8</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build-openjdk-8</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运行" tabindex="-1"><a class="header-anchor" href="#运行"><span>运行</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build-openjdk-8</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1234:1234</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build-openjdk-8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>1234端口用于gdbserver 这个非常重要！！！</p></blockquote><h2 id="编译" tabindex="-1"><a class="header-anchor" href="#编译"><span>编译</span></a></h2><p>进入到容器后执行</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jdk-jdk8-b120/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除adjust-mflags.sh的67行，不然编译会报错</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sed</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;67d&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> hotspot/make/linux/makefiles/adjust-mflags.sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bash</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./configure</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --with-target-bits=64</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --with-debug-level=slowdebug</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --enable-debug-symbols</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --with-boot-jdk=/openjdk/java-se-7u75-ri</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --with-freetype-include=/usr/include/freetype2/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --with-freetype-lib=/usr/lib/x86_64-linux-gnu</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ZIP_DEBUGINFO_FILES=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正常输出</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>====================================================</span></span>
<span class="line"><span>A new configuration has been successfully created in</span></span>
<span class="line"><span>/openjdk/jdk-jdk8-b120/build/linux-x86_64-normal-server-slowdebug</span></span>
<span class="line"><span>using configure arguments &#39;--with-target-bits=64 --with-debug-level=slowdebug --enable-debug-symbols --with-boot-jdk=/openjdk/java-se-7u75-ri --with-freetype-include=/usr/include/freetype2/ --with-freetype-lib=/usr/lib/x86_64-linux-gnu ZIP_DEBUGINFO_FILES=0&#39;.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Configuration summary:</span></span>
<span class="line"><span>* Debug level:    slowdebug</span></span>
<span class="line"><span>* JDK variant:    normal</span></span>
<span class="line"><span>* JVM variants:   server</span></span>
<span class="line"><span>* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Tools summary:</span></span>
<span class="line"><span>* Boot JDK:       openjdk version &quot;1.7.0_75&quot; OpenJDK Runtime Environment (build 1.7.0_75-b13) OpenJDK 64-Bit Server VM (build 24.75-b04, mixed mode)  (at /openjdk/java-se-7u75-ri)</span></span>
<span class="line"><span>* C Compiler:     gcc-5 (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 version 20160609 (at /usr/bin/gcc-5)</span></span>
<span class="line"><span>* C++ Compiler:   g++-5 (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 version 20160609 (at /usr/bin/g++-5)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Build performance summary:</span></span>
<span class="line"><span>* Cores to use:   4</span></span>
<span class="line"><span>* Memory limit:   12698 MB</span></span>
<span class="line"><span>* ccache status:  not installed (consider installing)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Build performance tip: ccache gives a tremendous speedup for C++ recompilations.</span></span>
<span class="line"><span>You do not have ccache installed. Try installing it.</span></span>
<span class="line"><span>You might be able to fix this by running &#39;sudo apt-get install ccache&#39;.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> all</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> DISABLE_HOTSPOT_OS_VERSION_CHECK=OK</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ZIP_DEBUGINFO_FILES=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一杯咖啡时间过后看到一下内容输出就大功告成了。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>----- Build times -------</span></span>
<span class="line"><span>Start 2021-01-15 00:57:13</span></span>
<span class="line"><span>End   2021-01-15 01:05:57</span></span>
<span class="line"><span>00:00:27 corba</span></span>
<span class="line"><span>00:00:14 demos</span></span>
<span class="line"><span>00:01:40 docs</span></span>
<span class="line"><span>00:02:15 hotspot</span></span>
<span class="line"><span>00:00:18 images</span></span>
<span class="line"><span>00:00:17 jaxp</span></span>
<span class="line"><span>00:00:20 jaxws</span></span>
<span class="line"><span>00:02:31 jdk</span></span>
<span class="line"><span>00:00:30 langtools</span></span>
<span class="line"><span>00:00:12 nashorn</span></span>
<span class="line"><span>00:08:44 TOTAL</span></span>
<span class="line"><span>-------------------------</span></span>
<span class="line"><span>Finished building OpenJDK for target &#39;all&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clion配置" tabindex="-1"><a class="header-anchor" href="#clion配置"><span>Clion配置</span></a></h2><p>把<code>jdk-jdk8-b120.tar.gz</code>解压，用clion打开项目（open -&gt; 选择jdk-jdk8-b120目录）</p><p>添加GDB Remote Debug配置如下图</p><p><img src="https://imgkr2.cn-bj.ufileos.com/802200f7-8207-4a14-bb60-b9c25f034761.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;Signature=RNqVlvKrjJ0USEtSwsPaZj5kIw8%3D&amp;Expires=1610773857" alt=""></p><p>进入容器，cd到<code>/openjdk/jdk-jdk8-b120/build/linux-x86_64-normal-server-slowdebug/jdk/bin</code>，执行<code>gdbserver</code></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">gdbserver</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :1234</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ./java</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>正常输出</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Process ./java created; pid = 5642</span></span>
<span class="line"><span>Listening on port 1234</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>下一步 <img src="https://imgkr2.cn-bj.ufileos.com/11fa784a-fd90-4f93-abed-fe619a65d6cc.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;Signature=S%2BrRHBbHdxm3cjs8U7ypLT4x7Og%3D&amp;Expires=1610773856" alt=""></p><p>等待一会儿，程序就停在断点上了。</p><p><img src="https://static01.imgkr.com/temp/381539d2acf34a07a0127584264b0396.png" alt=""></p><p>后面的操作就和idea一样了，但是如果没了解过gdb的可以找找资料学习下。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>1. git clone https://e.coding.net/javalistcn/openjdk/build-openjdk-8.git</span></span>
<span class="line"><span>2. cd  build-openjdk-8</span></span>
<span class="line"><span>3. docker build -t build-openjdk-8 .</span></span>
<span class="line"><span>4. cd jdk-jdk8-b120/</span></span>
<span class="line"><span>5. sed -i &#39;67d&#39; hotspot/make/linux/makefiles/adjust-mflags.sh</span></span>
<span class="line"><span>6. bash ./configure --with-target-bits=64 --with-debug-level=slowdebug --enable-debug-symbols --with-boot-jdk=/openjdk/java-se-7u75-ri --with-freetype-include=/usr/include/freetype2/ --with-freetype-lib=/usr/lib/x86_64-linux-gnu ZIP_DEBUGINFO_FILES=0</span></span>
<span class="line"><span>7. make all DISABLE_HOTSPOT_OS_VERSION_CHECK=OK ZIP_DEBUGINFO_FILES=0</span></span>
<span class="line"><span>8. 配置clion</span></span>
<span class="line"><span>9. 运行gdbserver</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://image-static.segmentfault.com/235/214/2352149115-600132dbe57c7" alt=""></p>`,37)]))}const c=i(l,[["render",d]]),h=JSON.parse('{"path":"/tech/java/Windows%E4%B8%8BClion%E7%BB%93%E5%90%88docker%E8%B0%83%E8%AF%95openjdk8%E6%BA%90%E7%A0%81.html","title":"简单几步！Windows下Clion结合docker调试openjdk8源码","lang":"zh-CN","frontmatter":{"date":"2021-01-15T15:28:00.000Z","category":["Java"],"tag":["源码"],"description":"简单几步！Windows下Clion结合docker调试openjdk8源码 废话不多说，开干！ 原理是通过Docker编译openjdk，然后结合clion通过gdbserver远程调试 环境需求 Clion Docker 我测试的版本 Docker for windows : Docker version 20.10.2, build 2291f6...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"简单几步！Windows下Clion结合docker调试openjdk8源码\\",\\"image\\":[\\"https://imgkr2.cn-bj.ufileos.com/802200f7-8207-4a14-bb60-b9c25f034761.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=RNqVlvKrjJ0USEtSwsPaZj5kIw8%253D&Expires=1610773857\\",\\"https://imgkr2.cn-bj.ufileos.com/11fa784a-fd90-4f93-abed-fe619a65d6cc.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=S%252BrRHBbHdxm3cjs8U7ypLT4x7Og%253D&Expires=1610773856\\",\\"https://static01.imgkr.com/temp/381539d2acf34a07a0127584264b0396.png\\",\\"https://image-static.segmentfault.com/235/214/2352149115-600132dbe57c7\\"],\\"datePublished\\":\\"2021-01-15T15:28:00.000Z\\",\\"dateModified\\":\\"2023-03-22T17:33:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DHB\\",\\"url\\":\\"https://dhbin.cn\\"}]}"],["meta",{"property":"og:url","content":"https://dhbin.cn/tech/java/Windows%E4%B8%8BClion%E7%BB%93%E5%90%88docker%E8%B0%83%E8%AF%95openjdk8%E6%BA%90%E7%A0%81.html"}],["meta",{"property":"og:site_name","content":"HB技术栈"}],["meta",{"property":"og:title","content":"简单几步！Windows下Clion结合docker调试openjdk8源码"}],["meta",{"property":"og:description","content":"简单几步！Windows下Clion结合docker调试openjdk8源码 废话不多说，开干！ 原理是通过Docker编译openjdk，然后结合clion通过gdbserver远程调试 环境需求 Clion Docker 我测试的版本 Docker for windows : Docker version 20.10.2, build 2291f6..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://imgkr2.cn-bj.ufileos.com/802200f7-8207-4a14-bb60-b9c25f034761.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=RNqVlvKrjJ0USEtSwsPaZj5kIw8%253D&Expires=1610773857"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T17:33:14.000Z"}],["meta",{"property":"article:tag","content":"源码"}],["meta",{"property":"article:published_time","content":"2021-01-15T15:28:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T17:33:14.000Z"}]]},"git":{"createdTime":1679384580000,"updatedTime":1679506394000,"contributors":[{"name":"donghaibin","username":"donghaibin","email":"xx158@qq.com","commits":1,"url":"https://github.com/donghaibin"},{"name":"dhb","username":"dhb","email":"xx158@qq.com","commits":1,"url":"https://github.com/dhb"}]},"readingTime":{"minutes":2.36,"words":709},"excerpt":"\\n<blockquote>\\n<p>废话不多说，开干！</p>\\n</blockquote>\\n<p>原理是通过Docker编译openjdk，然后结合clion通过gdbserver远程调试</p>\\n<h2>环境需求</h2>\\n<ul>\\n<li>Clion</li>\\n<li>Docker</li>\\n</ul>\\n<p>我测试的版本</p>\\n<p>Docker for windows : <code>Docker version 20.10.2, build 2291f61</code></p>\\n<p>Clion : <code>2020.3.1</code></p>\\n<h1>构建镜像</h1>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-bash\\"><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">git</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> clone</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> https://e.coding.net/javalistcn/openjdk/build-openjdk-8.git</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">cd</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">  build-openjdk-8</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">docker</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> build</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> -t</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> build-openjdk-8</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> .</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,h as data};
